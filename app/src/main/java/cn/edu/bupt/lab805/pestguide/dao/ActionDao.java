package cn.edu.bupt.lab805.pestguide.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.edu.bupt.lab805.pestguide.entity.Action;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACTION".
*/
public class ActionDao extends AbstractDao<Action, Long> {

    public static final String TABLENAME = "ACTION";

    /**
     * Properties of entity Action.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Gybm = new Property(1, Long.class, "gybm", false, "GYBM");
        public final static Property Actionname = new Property(2, String.class, "actionname", false, "ACTIONNAME");
        public final static Property Startdate = new Property(3, java.util.Date.class, "startdate", false, "STARTDATE");
        public final static Property Enddate = new Property(4, java.util.Date.class, "enddate", false, "ENDDATE");
        public final static Property Actionremark = new Property(5, String.class, "actionremark", false, "ACTIONREMARK");
        public final static Property Submittime = new Property(6, java.util.Date.class, "submittime", false, "SUBMITTIME");
    }


    public ActionDao(DaoConfig config) {
        super(config);
    }
    
    public ActionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"GYBM\" INTEGER," + // 1: gybm
                "\"ACTIONNAME\" TEXT," + // 2: actionname
                "\"STARTDATE\" INTEGER," + // 3: startdate
                "\"ENDDATE\" INTEGER," + // 4: enddate
                "\"ACTIONREMARK\" TEXT," + // 5: actionremark
                "\"SUBMITTIME\" INTEGER);"); // 6: submittime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Action entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long gybm = entity.getGybm();
        if (gybm != null) {
            stmt.bindLong(2, gybm);
        }
 
        String actionname = entity.getActionname();
        if (actionname != null) {
            stmt.bindString(3, actionname);
        }
 
        java.util.Date startdate = entity.getStartdate();
        if (startdate != null) {
            stmt.bindLong(4, startdate.getTime());
        }
 
        java.util.Date enddate = entity.getEnddate();
        if (enddate != null) {
            stmt.bindLong(5, enddate.getTime());
        }
 
        String actionremark = entity.getActionremark();
        if (actionremark != null) {
            stmt.bindString(6, actionremark);
        }
 
        java.util.Date submittime = entity.getSubmittime();
        if (submittime != null) {
            stmt.bindLong(7, submittime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Action entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long gybm = entity.getGybm();
        if (gybm != null) {
            stmt.bindLong(2, gybm);
        }
 
        String actionname = entity.getActionname();
        if (actionname != null) {
            stmt.bindString(3, actionname);
        }
 
        java.util.Date startdate = entity.getStartdate();
        if (startdate != null) {
            stmt.bindLong(4, startdate.getTime());
        }
 
        java.util.Date enddate = entity.getEnddate();
        if (enddate != null) {
            stmt.bindLong(5, enddate.getTime());
        }
 
        String actionremark = entity.getActionremark();
        if (actionremark != null) {
            stmt.bindString(6, actionremark);
        }
 
        java.util.Date submittime = entity.getSubmittime();
        if (submittime != null) {
            stmt.bindLong(7, submittime.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Action readEntity(Cursor cursor, int offset) {
        Action entity = new Action( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // gybm
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // actionname
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // startdate
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // enddate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // actionremark
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // submittime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Action entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGybm(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setActionname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStartdate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setEnddate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setActionremark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSubmittime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Action entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Action entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Action entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
