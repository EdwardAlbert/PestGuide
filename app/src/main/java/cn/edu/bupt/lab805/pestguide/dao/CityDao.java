package cn.edu.bupt.lab805.pestguide.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.edu.bupt.lab805.pestguide.entity.City;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CITY".
*/
public class CityDao extends AbstractDao<City, Long> {

    public static final String TABLENAME = "CITY";

    /**
     * Properties of entity City.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Root = new Property(1, String.class, "root", false, "ROOT");
        public final static Property Parent = new Property(2, String.class, "parent", false, "PARENT");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Pinyin = new Property(4, String.class, "pinyin", false, "PINYIN");
        public final static Property Phone_code = new Property(5, String.class, "phone_code", false, "PHONE_CODE");
        public final static Property Area_code = new Property(6, String.class, "area_code", false, "AREA_CODE");
        public final static Property X = new Property(7, String.class, "x", false, "X");
        public final static Property Y = new Property(8, String.class, "y", false, "Y");
        public final static Property PosID = new Property(9, String.class, "posID", false, "POS_ID");
        public final static Property Url = new Property(10, String.class, "url", false, "URL");
    }


    public CityDao(DaoConfig config) {
        super(config);
    }
    
    public CityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ROOT\" TEXT," + // 1: root
                "\"PARENT\" TEXT," + // 2: parent
                "\"NAME\" TEXT," + // 3: name
                "\"PINYIN\" TEXT," + // 4: pinyin
                "\"PHONE_CODE\" TEXT," + // 5: phone_code
                "\"AREA_CODE\" TEXT," + // 6: area_code
                "\"X\" TEXT," + // 7: x
                "\"Y\" TEXT," + // 8: y
                "\"POS_ID\" TEXT," + // 9: posID
                "\"URL\" TEXT);"); // 10: url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, City entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String root = entity.getRoot();
        if (root != null) {
            stmt.bindString(2, root);
        }
 
        String parent = entity.getParent();
        if (parent != null) {
            stmt.bindString(3, parent);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(5, pinyin);
        }
 
        String phone_code = entity.getPhone_code();
        if (phone_code != null) {
            stmt.bindString(6, phone_code);
        }
 
        String area_code = entity.getArea_code();
        if (area_code != null) {
            stmt.bindString(7, area_code);
        }
 
        String x = entity.getX();
        if (x != null) {
            stmt.bindString(8, x);
        }
 
        String y = entity.getY();
        if (y != null) {
            stmt.bindString(9, y);
        }
 
        String posID = entity.getPosID();
        if (posID != null) {
            stmt.bindString(10, posID);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(11, url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, City entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String root = entity.getRoot();
        if (root != null) {
            stmt.bindString(2, root);
        }
 
        String parent = entity.getParent();
        if (parent != null) {
            stmt.bindString(3, parent);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(5, pinyin);
        }
 
        String phone_code = entity.getPhone_code();
        if (phone_code != null) {
            stmt.bindString(6, phone_code);
        }
 
        String area_code = entity.getArea_code();
        if (area_code != null) {
            stmt.bindString(7, area_code);
        }
 
        String x = entity.getX();
        if (x != null) {
            stmt.bindString(8, x);
        }
 
        String y = entity.getY();
        if (y != null) {
            stmt.bindString(9, y);
        }
 
        String posID = entity.getPosID();
        if (posID != null) {
            stmt.bindString(10, posID);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(11, url);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public City readEntity(Cursor cursor, int offset) {
        City entity = new City( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // root
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // parent
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pinyin
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone_code
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // area_code
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // x
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // y
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // posID
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, City entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRoot(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPinyin(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone_code(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setArea_code(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setX(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setY(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPosID(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(City entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(City entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(City entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
