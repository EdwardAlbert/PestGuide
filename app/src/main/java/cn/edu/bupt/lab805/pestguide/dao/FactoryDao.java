package cn.edu.bupt.lab805.pestguide.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.edu.bupt.lab805.pestguide.entity.Factory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FACTORY".
*/
public class FactoryDao extends AbstractDao<Factory, Void> {

    public static final String TABLENAME = "FACTORY";

    /**
     * Properties of entity Factory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Lkbm = new Property(0, String.class, "lkbm", false, "LKBM");
        public final static Property Lkmc = new Property(1, String.class, "lkmc", false, "LKMC");
        public final static Property Lkdz = new Property(2, String.class, "lkdz", false, "LKDZ");
        public final static Property Longtitude = new Property(3, Double.class, "longtitude", false, "LONGTITUDE");
        public final static Property Latitude = new Property(4, Double.class, "latitude", false, "LATITUDE");
        public final static Property Altitude = new Property(5, Double.class, "altitude", false, "ALTITUDE");
        public final static Property Hasreal = new Property(6, Boolean.class, "hasreal", false, "HASREAL");
        public final static Property Totalbin = new Property(7, Integer.class, "totalbin", false, "TOTALBIN");
        public final static Property Postcode = new Property(8, String.class, "postcode", false, "POSTCODE");
        public final static Property Contact = new Property(9, String.class, "contact", false, "CONTACT");
        public final static Property Phone = new Property(10, String.class, "phone", false, "PHONE");
        public final static Property Modifier = new Property(11, String.class, "modifier", false, "MODIFIER");
        public final static Property Modifydate = new Property(12, String.class, "modifydate", false, "MODIFYDATE");
        public final static Property Lklx = new Property(13, String.class, "lklx", false, "LKLX");
        public final static Property Pic = new Property(14, String.class, "pic", false, "PIC");
    }


    public FactoryDao(DaoConfig config) {
        super(config);
    }
    
    public FactoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FACTORY\" (" + //
                "\"LKBM\" TEXT," + // 0: lkbm
                "\"LKMC\" TEXT," + // 1: lkmc
                "\"LKDZ\" TEXT," + // 2: lkdz
                "\"LONGTITUDE\" REAL," + // 3: longtitude
                "\"LATITUDE\" REAL," + // 4: latitude
                "\"ALTITUDE\" REAL," + // 5: altitude
                "\"HASREAL\" INTEGER," + // 6: hasreal
                "\"TOTALBIN\" INTEGER," + // 7: totalbin
                "\"POSTCODE\" TEXT," + // 8: postcode
                "\"CONTACT\" TEXT," + // 9: contact
                "\"PHONE\" TEXT," + // 10: phone
                "\"MODIFIER\" TEXT," + // 11: modifier
                "\"MODIFYDATE\" TEXT," + // 12: modifydate
                "\"LKLX\" TEXT," + // 13: lklx
                "\"PIC\" TEXT);"); // 14: pic
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FACTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Factory entity) {
        stmt.clearBindings();
 
        String lkbm = entity.getLkbm();
        if (lkbm != null) {
            stmt.bindString(1, lkbm);
        }
 
        String lkmc = entity.getLkmc();
        if (lkmc != null) {
            stmt.bindString(2, lkmc);
        }
 
        String lkdz = entity.getLkdz();
        if (lkdz != null) {
            stmt.bindString(3, lkdz);
        }
 
        Double longtitude = entity.getLongtitude();
        if (longtitude != null) {
            stmt.bindDouble(4, longtitude);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(5, latitude);
        }
 
        Double altitude = entity.getAltitude();
        if (altitude != null) {
            stmt.bindDouble(6, altitude);
        }
 
        Boolean hasreal = entity.getHasreal();
        if (hasreal != null) {
            stmt.bindLong(7, hasreal ? 1L: 0L);
        }
 
        Integer totalbin = entity.getTotalbin();
        if (totalbin != null) {
            stmt.bindLong(8, totalbin);
        }
 
        String postcode = entity.getPostcode();
        if (postcode != null) {
            stmt.bindString(9, postcode);
        }
 
        String contact = entity.getContact();
        if (contact != null) {
            stmt.bindString(10, contact);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(11, phone);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(12, modifier);
        }
 
        String modifydate = entity.getModifydate();
        if (modifydate != null) {
            stmt.bindString(13, modifydate);
        }
 
        String lklx = entity.getLklx();
        if (lklx != null) {
            stmt.bindString(14, lklx);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(15, pic);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Factory entity) {
        stmt.clearBindings();
 
        String lkbm = entity.getLkbm();
        if (lkbm != null) {
            stmt.bindString(1, lkbm);
        }
 
        String lkmc = entity.getLkmc();
        if (lkmc != null) {
            stmt.bindString(2, lkmc);
        }
 
        String lkdz = entity.getLkdz();
        if (lkdz != null) {
            stmt.bindString(3, lkdz);
        }
 
        Double longtitude = entity.getLongtitude();
        if (longtitude != null) {
            stmt.bindDouble(4, longtitude);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(5, latitude);
        }
 
        Double altitude = entity.getAltitude();
        if (altitude != null) {
            stmt.bindDouble(6, altitude);
        }
 
        Boolean hasreal = entity.getHasreal();
        if (hasreal != null) {
            stmt.bindLong(7, hasreal ? 1L: 0L);
        }
 
        Integer totalbin = entity.getTotalbin();
        if (totalbin != null) {
            stmt.bindLong(8, totalbin);
        }
 
        String postcode = entity.getPostcode();
        if (postcode != null) {
            stmt.bindString(9, postcode);
        }
 
        String contact = entity.getContact();
        if (contact != null) {
            stmt.bindString(10, contact);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(11, phone);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(12, modifier);
        }
 
        String modifydate = entity.getModifydate();
        if (modifydate != null) {
            stmt.bindString(13, modifydate);
        }
 
        String lklx = entity.getLklx();
        if (lklx != null) {
            stmt.bindString(14, lklx);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(15, pic);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Factory readEntity(Cursor cursor, int offset) {
        Factory entity = new Factory( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // lkbm
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // lkmc
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lkdz
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // longtitude
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // latitude
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // altitude
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // hasreal
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // totalbin
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // postcode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // contact
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // phone
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // modifier
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // modifydate
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // lklx
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // pic
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Factory entity, int offset) {
        entity.setLkbm(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLkmc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLkdz(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLongtitude(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setLatitude(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setAltitude(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setHasreal(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setTotalbin(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setPostcode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setContact(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPhone(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setModifier(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setModifydate(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLklx(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPic(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Factory entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Factory entity) {
        return null;
    }

    @Override
    public boolean hasKey(Factory entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
