package cn.edu.bupt.lab805.pestguide.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.edu.bupt.lab805.pestguide.entity.Grain;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GRAIN".
*/
public class GrainDao extends AbstractDao<Grain, Long> {

    public static final String TABLENAME = "GRAIN";

    /**
     * Properties of entity Grain.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Lcbm = new Property(1, String.class, "lcbm", false, "LCBM");
        public final static Property Indate = new Property(2, String.class, "indate", false, "INDATE");
        public final static Property Clxs = new Property(3, String.class, "clxs", false, "CLXS");
        public final static Property Grainname = new Property(4, String.class, "grainname", false, "GRAINNAME");
        public final static Property Harvestdate = new Property(5, String.class, "harvestdate", false, "HARVESTDATE");
        public final static Property Source = new Property(6, String.class, "source", false, "SOURCE");
        public final static Property Reserveperiod = new Property(7, Integer.class, "reserveperiod", false, "RESERVEPERIOD");
        public final static Property Innum = new Property(8, Integer.class, "innum", false, "INNUM");
    }


    public GrainDao(DaoConfig config) {
        super(config);
    }
    
    public GrainDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GRAIN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LCBM\" TEXT," + // 1: lcbm
                "\"INDATE\" TEXT," + // 2: indate
                "\"CLXS\" TEXT," + // 3: clxs
                "\"GRAINNAME\" TEXT," + // 4: grainname
                "\"HARVESTDATE\" TEXT," + // 5: harvestdate
                "\"SOURCE\" TEXT," + // 6: source
                "\"RESERVEPERIOD\" INTEGER," + // 7: reserveperiod
                "\"INNUM\" INTEGER);"); // 8: innum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GRAIN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Grain entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String lcbm = entity.getLcbm();
        if (lcbm != null) {
            stmt.bindString(2, lcbm);
        }
 
        String indate = entity.getIndate();
        if (indate != null) {
            stmt.bindString(3, indate);
        }
 
        String clxs = entity.getClxs();
        if (clxs != null) {
            stmt.bindString(4, clxs);
        }
 
        String grainname = entity.getGrainname();
        if (grainname != null) {
            stmt.bindString(5, grainname);
        }
 
        String harvestdate = entity.getHarvestdate();
        if (harvestdate != null) {
            stmt.bindString(6, harvestdate);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(7, source);
        }
 
        Integer reserveperiod = entity.getReserveperiod();
        if (reserveperiod != null) {
            stmt.bindLong(8, reserveperiod);
        }
 
        Integer innum = entity.getInnum();
        if (innum != null) {
            stmt.bindLong(9, innum);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Grain entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String lcbm = entity.getLcbm();
        if (lcbm != null) {
            stmt.bindString(2, lcbm);
        }
 
        String indate = entity.getIndate();
        if (indate != null) {
            stmt.bindString(3, indate);
        }
 
        String clxs = entity.getClxs();
        if (clxs != null) {
            stmt.bindString(4, clxs);
        }
 
        String grainname = entity.getGrainname();
        if (grainname != null) {
            stmt.bindString(5, grainname);
        }
 
        String harvestdate = entity.getHarvestdate();
        if (harvestdate != null) {
            stmt.bindString(6, harvestdate);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(7, source);
        }
 
        Integer reserveperiod = entity.getReserveperiod();
        if (reserveperiod != null) {
            stmt.bindLong(8, reserveperiod);
        }
 
        Integer innum = entity.getInnum();
        if (innum != null) {
            stmt.bindLong(9, innum);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Grain readEntity(Cursor cursor, int offset) {
        Grain entity = new Grain( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // lcbm
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // indate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // clxs
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // grainname
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // harvestdate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // source
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // reserveperiod
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // innum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Grain entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLcbm(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIndate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setClxs(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGrainname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHarvestdate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSource(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReserveperiod(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setInnum(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Grain entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Grain entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Grain entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
