package cn.edu.bupt.lab805.pestguide.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.edu.bupt.lab805.pestguide.entity.Pest;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PEST".
*/
public class PestDao extends AbstractDao<Pest, Long> {

    public static final String TABLENAME = "PEST";

    /**
     * Properties of entity Pest.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Classicid = new Property(2, Short.class, "classicid", false, "CLASSICID");
        public final static Property Family = new Property(3, String.class, "family", false, "FAMILY");
        public final static Property Category = new Property(4, String.class, "category", false, "CATEGORY");
        public final static Property Feature = new Property(5, String.class, "feature", false, "FEATURE");
        public final static Property Habit = new Property(6, String.class, "habit", false, "HABIT");
        public final static Property Damage = new Property(7, String.class, "damage", false, "DAMAGE");
        public final static Property Distribution = new Property(8, String.class, "distribution", false, "DISTRIBUTION");
        public final static Property Prevention = new Property(9, String.class, "prevention", false, "PREVENTION");
        public final static Property Pictureurl = new Property(10, String.class, "pictureurl", false, "PICTUREURL");
        public final static Property Importance = new Property(11, Integer.class, "importance", false, "IMPORTANCE");
    }


    public PestDao(DaoConfig config) {
        super(config);
    }
    
    public PestDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PEST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"CLASSICID\" INTEGER," + // 2: classicid
                "\"FAMILY\" TEXT," + // 3: family
                "\"CATEGORY\" TEXT," + // 4: category
                "\"FEATURE\" TEXT," + // 5: feature
                "\"HABIT\" TEXT," + // 6: habit
                "\"DAMAGE\" TEXT," + // 7: damage
                "\"DISTRIBUTION\" TEXT," + // 8: distribution
                "\"PREVENTION\" TEXT," + // 9: prevention
                "\"PICTUREURL\" TEXT," + // 10: pictureurl
                "\"IMPORTANCE\" INTEGER);"); // 11: importance
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PEST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Pest entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Short classicid = entity.getClassicid();
        if (classicid != null) {
            stmt.bindLong(3, classicid);
        }
 
        String family = entity.getFamily();
        if (family != null) {
            stmt.bindString(4, family);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(5, category);
        }
 
        String feature = entity.getFeature();
        if (feature != null) {
            stmt.bindString(6, feature);
        }
 
        String habit = entity.getHabit();
        if (habit != null) {
            stmt.bindString(7, habit);
        }
 
        String damage = entity.getDamage();
        if (damage != null) {
            stmt.bindString(8, damage);
        }
 
        String distribution = entity.getDistribution();
        if (distribution != null) {
            stmt.bindString(9, distribution);
        }
 
        String prevention = entity.getPrevention();
        if (prevention != null) {
            stmt.bindString(10, prevention);
        }
 
        String pictureurl = entity.getPictureurl();
        if (pictureurl != null) {
            stmt.bindString(11, pictureurl);
        }
 
        Integer importance = entity.getImportance();
        if (importance != null) {
            stmt.bindLong(12, importance);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Pest entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Short classicid = entity.getClassicid();
        if (classicid != null) {
            stmt.bindLong(3, classicid);
        }
 
        String family = entity.getFamily();
        if (family != null) {
            stmt.bindString(4, family);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(5, category);
        }
 
        String feature = entity.getFeature();
        if (feature != null) {
            stmt.bindString(6, feature);
        }
 
        String habit = entity.getHabit();
        if (habit != null) {
            stmt.bindString(7, habit);
        }
 
        String damage = entity.getDamage();
        if (damage != null) {
            stmt.bindString(8, damage);
        }
 
        String distribution = entity.getDistribution();
        if (distribution != null) {
            stmt.bindString(9, distribution);
        }
 
        String prevention = entity.getPrevention();
        if (prevention != null) {
            stmt.bindString(10, prevention);
        }
 
        String pictureurl = entity.getPictureurl();
        if (pictureurl != null) {
            stmt.bindString(11, pictureurl);
        }
 
        Integer importance = entity.getImportance();
        if (importance != null) {
            stmt.bindLong(12, importance);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Pest readEntity(Cursor cursor, int offset) {
        Pest entity = new Pest( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2), // classicid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // family
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // category
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // feature
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // habit
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // damage
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // distribution
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // prevention
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // pictureurl
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // importance
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Pest entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setClassicid(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2));
        entity.setFamily(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCategory(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFeature(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHabit(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDamage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDistribution(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPrevention(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPictureurl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setImportance(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Pest entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Pest entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Pest entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
