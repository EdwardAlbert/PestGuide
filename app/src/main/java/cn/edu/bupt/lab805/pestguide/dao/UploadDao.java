package cn.edu.bupt.lab805.pestguide.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.edu.bupt.lab805.pestguide.entity.Upload;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UPLOAD".
*/
public class UploadDao extends AbstractDao<Upload, Long> {

    public static final String TABLENAME = "UPLOAD";

    /**
     * Properties of entity Upload.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Temperature = new Property(1, Float.class, "temperature", false, "TEMPERATURE");
        public final static Property Humidity = new Property(2, Float.class, "humidity", false, "HUMIDITY");
        public final static Property Co2 = new Property(3, Float.class, "co2", false, "CO2");
        public final static Property O2 = new Property(4, Float.class, "o2", false, "O2");
        public final static Property Kind = new Property(5, String.class, "kind", false, "KIND");
        public final static Property Stage = new Property(6, String.class, "stage", false, "STAGE");
        public final static Property Num = new Property(7, Integer.class, "num", false, "NUM");
        public final static Property X = new Property(8, Integer.class, "x", false, "X");
        public final static Property Y = new Property(9, Integer.class, "y", false, "Y");
        public final static Property Z = new Property(10, Integer.class, "z", false, "Z");
        public final static Property Longtitude = new Property(11, Double.class, "longtitude", false, "LONGTITUDE");
        public final static Property Latitude = new Property(12, Double.class, "latitude", false, "LATITUDE");
        public final static Property Altitude = new Property(13, Double.class, "altitude", false, "ALTITUDE");
        public final static Property Collecttime = new Property(14, String.class, "collecttime", false, "COLLECTTIME");
        public final static Property Modifier = new Property(15, String.class, "modifier", false, "MODIFIER");
        public final static Property Modifytime = new Property(16, String.class, "modifytime", false, "MODIFYTIME");
        public final static Property Pic = new Property(17, String.class, "pic", false, "PIC");
        public final static Property Source = new Property(18, String.class, "source", false, "SOURCE");
        public final static Property Note = new Property(19, String.class, "note", false, "NOTE");
        public final static Property Trapsource = new Property(20, String.class, "trapsource", false, "TRAPSOURCE");
        public final static Property Lcbm = new Property(21, String.class, "lcbm", false, "LCBM");
        public final static Property Binname = new Property(22, String.class, "binname", false, "BINNAME");
        public final static Property Orientation = new Property(23, String.class, "orientation", false, "ORIENTATION");
        public final static Property Granarynum = new Property(24, String.class, "granarynum", false, "GRANARYNUM");
    }


    public UploadDao(DaoConfig config) {
        super(config);
    }
    
    public UploadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UPLOAD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TEMPERATURE\" REAL," + // 1: temperature
                "\"HUMIDITY\" REAL," + // 2: humidity
                "\"CO2\" REAL," + // 3: co2
                "\"O2\" REAL," + // 4: o2
                "\"KIND\" TEXT," + // 5: kind
                "\"STAGE\" TEXT," + // 6: stage
                "\"NUM\" INTEGER," + // 7: num
                "\"X\" INTEGER," + // 8: x
                "\"Y\" INTEGER," + // 9: y
                "\"Z\" INTEGER," + // 10: z
                "\"LONGTITUDE\" REAL," + // 11: longtitude
                "\"LATITUDE\" REAL," + // 12: latitude
                "\"ALTITUDE\" REAL," + // 13: altitude
                "\"COLLECTTIME\" TEXT," + // 14: collecttime
                "\"MODIFIER\" TEXT," + // 15: modifier
                "\"MODIFYTIME\" TEXT," + // 16: modifytime
                "\"PIC\" TEXT," + // 17: pic
                "\"SOURCE\" TEXT," + // 18: source
                "\"NOTE\" TEXT," + // 19: note
                "\"TRAPSOURCE\" TEXT," + // 20: trapsource
                "\"LCBM\" TEXT," + // 21: lcbm
                "\"BINNAME\" TEXT," + // 22: binname
                "\"ORIENTATION\" TEXT," + // 23: orientation
                "\"GRANARYNUM\" TEXT);"); // 24: granarynum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UPLOAD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Upload entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Float temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindDouble(2, temperature);
        }
 
        Float humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindDouble(3, humidity);
        }
 
        Float co2 = entity.getCo2();
        if (co2 != null) {
            stmt.bindDouble(4, co2);
        }
 
        Float o2 = entity.getO2();
        if (o2 != null) {
            stmt.bindDouble(5, o2);
        }
 
        String kind = entity.getKind();
        if (kind != null) {
            stmt.bindString(6, kind);
        }
 
        String stage = entity.getStage();
        if (stage != null) {
            stmt.bindString(7, stage);
        }
 
        Integer num = entity.getNum();
        if (num != null) {
            stmt.bindLong(8, num);
        }
 
        Integer x = entity.getX();
        if (x != null) {
            stmt.bindLong(9, x);
        }
 
        Integer y = entity.getY();
        if (y != null) {
            stmt.bindLong(10, y);
        }
 
        Integer z = entity.getZ();
        if (z != null) {
            stmt.bindLong(11, z);
        }
 
        Double longtitude = entity.getLongtitude();
        if (longtitude != null) {
            stmt.bindDouble(12, longtitude);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(13, latitude);
        }
 
        Double altitude = entity.getAltitude();
        if (altitude != null) {
            stmt.bindDouble(14, altitude);
        }
 
        String collecttime = entity.getCollecttime();
        if (collecttime != null) {
            stmt.bindString(15, collecttime);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(16, modifier);
        }
 
        String modifytime = entity.getModifytime();
        if (modifytime != null) {
            stmt.bindString(17, modifytime);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(18, pic);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(19, source);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(20, note);
        }
 
        String trapsource = entity.getTrapsource();
        if (trapsource != null) {
            stmt.bindString(21, trapsource);
        }
 
        String lcbm = entity.getLcbm();
        if (lcbm != null) {
            stmt.bindString(22, lcbm);
        }
 
        String binname = entity.getBinname();
        if (binname != null) {
            stmt.bindString(23, binname);
        }
 
        String orientation = entity.getOrientation();
        if (orientation != null) {
            stmt.bindString(24, orientation);
        }
 
        String granarynum = entity.getGranarynum();
        if (granarynum != null) {
            stmt.bindString(25, granarynum);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Upload entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Float temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindDouble(2, temperature);
        }
 
        Float humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindDouble(3, humidity);
        }
 
        Float co2 = entity.getCo2();
        if (co2 != null) {
            stmt.bindDouble(4, co2);
        }
 
        Float o2 = entity.getO2();
        if (o2 != null) {
            stmt.bindDouble(5, o2);
        }
 
        String kind = entity.getKind();
        if (kind != null) {
            stmt.bindString(6, kind);
        }
 
        String stage = entity.getStage();
        if (stage != null) {
            stmt.bindString(7, stage);
        }
 
        Integer num = entity.getNum();
        if (num != null) {
            stmt.bindLong(8, num);
        }
 
        Integer x = entity.getX();
        if (x != null) {
            stmt.bindLong(9, x);
        }
 
        Integer y = entity.getY();
        if (y != null) {
            stmt.bindLong(10, y);
        }
 
        Integer z = entity.getZ();
        if (z != null) {
            stmt.bindLong(11, z);
        }
 
        Double longtitude = entity.getLongtitude();
        if (longtitude != null) {
            stmt.bindDouble(12, longtitude);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(13, latitude);
        }
 
        Double altitude = entity.getAltitude();
        if (altitude != null) {
            stmt.bindDouble(14, altitude);
        }
 
        String collecttime = entity.getCollecttime();
        if (collecttime != null) {
            stmt.bindString(15, collecttime);
        }
 
        String modifier = entity.getModifier();
        if (modifier != null) {
            stmt.bindString(16, modifier);
        }
 
        String modifytime = entity.getModifytime();
        if (modifytime != null) {
            stmt.bindString(17, modifytime);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(18, pic);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(19, source);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(20, note);
        }
 
        String trapsource = entity.getTrapsource();
        if (trapsource != null) {
            stmt.bindString(21, trapsource);
        }
 
        String lcbm = entity.getLcbm();
        if (lcbm != null) {
            stmt.bindString(22, lcbm);
        }
 
        String binname = entity.getBinname();
        if (binname != null) {
            stmt.bindString(23, binname);
        }
 
        String orientation = entity.getOrientation();
        if (orientation != null) {
            stmt.bindString(24, orientation);
        }
 
        String granarynum = entity.getGranarynum();
        if (granarynum != null) {
            stmt.bindString(25, granarynum);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Upload readEntity(Cursor cursor, int offset) {
        Upload entity = new Upload( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1), // temperature
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // humidity
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // co2
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // o2
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // kind
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // stage
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // num
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // x
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // y
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // z
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // longtitude
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // latitude
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // altitude
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // collecttime
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // modifier
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // modifytime
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // pic
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // source
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // note
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // trapsource
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // lcbm
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // binname
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // orientation
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // granarynum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Upload entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTemperature(cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1));
        entity.setHumidity(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setCo2(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setO2(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setKind(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNum(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setX(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setY(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setZ(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setLongtitude(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setLatitude(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setAltitude(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setCollecttime(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setModifier(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setModifytime(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPic(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setSource(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setNote(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setTrapsource(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setLcbm(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setBinname(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setOrientation(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setGranarynum(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Upload entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Upload entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Upload entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
